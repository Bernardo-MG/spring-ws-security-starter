post:
  summary: Create a user.
  operationId: createUser
  tags: [User]
  requestBody:
    required: true
    content:
      application/json:
        schema:
          $ref: '../components/users.yml#/components/schemas/UserCreation'
  responses:
    '201':
      description: User created.
      content:
        application/json:
          schema:
            $ref: '../components/users.yml#/components/schemas/UserResponse'
get:
  summary: Get all users.
  operationId: getAllUsers
  tags: [User]
  parameters:
    - in: query
      name: email
      schema: { type: string, format: email }
      description: Filter by email.
    - in: query
      name: username
      schema: { type: string }
      description: Filter by username.
    - in: query
      name: name
      schema: { type: string }
      description: Filter by display name.
    - in: query
      name: enabled
      schema: { type: boolean }
      description: Filter by enabled status.
    - in: query
      name: notLocked
      schema: { type: boolean }
      description: Filter by lock status.
    - in: query
      name: notExpired
      schema: { type: boolean }
      description: Filter by expiration.
    - in: query
      name: passwordNotExpired
      schema: { type: boolean }
      description: Filter by password expiration status.
    - name: page
      description: Page to return.
      in: query
      required: false
      schema:
        $ref: '../common/pagination.yml#/components/schemas/pageParam'
    - name: size
      description: Page size.
      in: query
      required: false
      schema:
        $ref: '../common/pagination.yml#/components/schemas/sizeParam'
    - name: sort
      in: query
      required: false
      description: Sorting to apply.
      schema:
        $ref: '../common/pagination.yml#/components/schemas/sortingParam'
  responses:
    '200':
      description: Users page
      content:
        application/json:
          schema:
            $ref: '../components/users.yml#/components/schemas/UserPageResponse'